// Code generated by counterfeiter. DO NOT EDIT.
package supportedfakes

import (
	"os"
	"sync"
)

type FakeVerifierImpl struct {
	ExecLookPathStub        func(string) (string, error)
	execLookPathMutex       sync.RWMutex
	execLookPathArgsForCall []struct {
		arg1 string
	}
	execLookPathReturns struct {
		result1 string
		result2 error
	}
	execLookPathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	OsStatStub        func(string) (os.FileInfo, error)
	osStatMutex       sync.RWMutex
	osStatArgsForCall []struct {
		arg1 string
	}
	osStatReturns struct {
		result1 os.FileInfo
		result2 error
	}
	osStatReturnsOnCall map[int]struct {
		result1 os.FileInfo
		result2 error
	}
	RuncIsEnabledStub        func() bool
	runcIsEnabledMutex       sync.RWMutex
	runcIsEnabledArgsForCall []struct {
	}
	runcIsEnabledReturns struct {
		result1 bool
	}
	runcIsEnabledReturnsOnCall map[int]struct {
		result1 bool
	}
	UnshareIsRootlessStub        func() bool
	unshareIsRootlessMutex       sync.RWMutex
	unshareIsRootlessArgsForCall []struct {
	}
	unshareIsRootlessReturns struct {
		result1 bool
	}
	unshareIsRootlessReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifierImpl) ExecLookPath(arg1 string) (string, error) {
	fake.execLookPathMutex.Lock()
	ret, specificReturn := fake.execLookPathReturnsOnCall[len(fake.execLookPathArgsForCall)]
	fake.execLookPathArgsForCall = append(fake.execLookPathArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ExecLookPath", []interface{}{arg1})
	fake.execLookPathMutex.Unlock()
	if fake.ExecLookPathStub != nil {
		return fake.ExecLookPathStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.execLookPathReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifierImpl) ExecLookPathCallCount() int {
	fake.execLookPathMutex.RLock()
	defer fake.execLookPathMutex.RUnlock()
	return len(fake.execLookPathArgsForCall)
}

func (fake *FakeVerifierImpl) ExecLookPathCalls(stub func(string) (string, error)) {
	fake.execLookPathMutex.Lock()
	defer fake.execLookPathMutex.Unlock()
	fake.ExecLookPathStub = stub
}

func (fake *FakeVerifierImpl) ExecLookPathArgsForCall(i int) string {
	fake.execLookPathMutex.RLock()
	defer fake.execLookPathMutex.RUnlock()
	argsForCall := fake.execLookPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifierImpl) ExecLookPathReturns(result1 string, result2 error) {
	fake.execLookPathMutex.Lock()
	defer fake.execLookPathMutex.Unlock()
	fake.ExecLookPathStub = nil
	fake.execLookPathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifierImpl) ExecLookPathReturnsOnCall(i int, result1 string, result2 error) {
	fake.execLookPathMutex.Lock()
	defer fake.execLookPathMutex.Unlock()
	fake.ExecLookPathStub = nil
	if fake.execLookPathReturnsOnCall == nil {
		fake.execLookPathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.execLookPathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifierImpl) OsStat(arg1 string) (os.FileInfo, error) {
	fake.osStatMutex.Lock()
	ret, specificReturn := fake.osStatReturnsOnCall[len(fake.osStatArgsForCall)]
	fake.osStatArgsForCall = append(fake.osStatArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OsStat", []interface{}{arg1})
	fake.osStatMutex.Unlock()
	if fake.OsStatStub != nil {
		return fake.OsStatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.osStatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifierImpl) OsStatCallCount() int {
	fake.osStatMutex.RLock()
	defer fake.osStatMutex.RUnlock()
	return len(fake.osStatArgsForCall)
}

func (fake *FakeVerifierImpl) OsStatCalls(stub func(string) (os.FileInfo, error)) {
	fake.osStatMutex.Lock()
	defer fake.osStatMutex.Unlock()
	fake.OsStatStub = stub
}

func (fake *FakeVerifierImpl) OsStatArgsForCall(i int) string {
	fake.osStatMutex.RLock()
	defer fake.osStatMutex.RUnlock()
	argsForCall := fake.osStatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifierImpl) OsStatReturns(result1 os.FileInfo, result2 error) {
	fake.osStatMutex.Lock()
	defer fake.osStatMutex.Unlock()
	fake.OsStatStub = nil
	fake.osStatReturns = struct {
		result1 os.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifierImpl) OsStatReturnsOnCall(i int, result1 os.FileInfo, result2 error) {
	fake.osStatMutex.Lock()
	defer fake.osStatMutex.Unlock()
	fake.OsStatStub = nil
	if fake.osStatReturnsOnCall == nil {
		fake.osStatReturnsOnCall = make(map[int]struct {
			result1 os.FileInfo
			result2 error
		})
	}
	fake.osStatReturnsOnCall[i] = struct {
		result1 os.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifierImpl) RuncIsEnabled() bool {
	fake.runcIsEnabledMutex.Lock()
	ret, specificReturn := fake.runcIsEnabledReturnsOnCall[len(fake.runcIsEnabledArgsForCall)]
	fake.runcIsEnabledArgsForCall = append(fake.runcIsEnabledArgsForCall, struct {
	}{})
	fake.recordInvocation("RuncIsEnabled", []interface{}{})
	fake.runcIsEnabledMutex.Unlock()
	if fake.RuncIsEnabledStub != nil {
		return fake.RuncIsEnabledStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runcIsEnabledReturns
	return fakeReturns.result1
}

func (fake *FakeVerifierImpl) RuncIsEnabledCallCount() int {
	fake.runcIsEnabledMutex.RLock()
	defer fake.runcIsEnabledMutex.RUnlock()
	return len(fake.runcIsEnabledArgsForCall)
}

func (fake *FakeVerifierImpl) RuncIsEnabledCalls(stub func() bool) {
	fake.runcIsEnabledMutex.Lock()
	defer fake.runcIsEnabledMutex.Unlock()
	fake.RuncIsEnabledStub = stub
}

func (fake *FakeVerifierImpl) RuncIsEnabledReturns(result1 bool) {
	fake.runcIsEnabledMutex.Lock()
	defer fake.runcIsEnabledMutex.Unlock()
	fake.RuncIsEnabledStub = nil
	fake.runcIsEnabledReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeVerifierImpl) RuncIsEnabledReturnsOnCall(i int, result1 bool) {
	fake.runcIsEnabledMutex.Lock()
	defer fake.runcIsEnabledMutex.Unlock()
	fake.RuncIsEnabledStub = nil
	if fake.runcIsEnabledReturnsOnCall == nil {
		fake.runcIsEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.runcIsEnabledReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeVerifierImpl) UnshareIsRootless() bool {
	fake.unshareIsRootlessMutex.Lock()
	ret, specificReturn := fake.unshareIsRootlessReturnsOnCall[len(fake.unshareIsRootlessArgsForCall)]
	fake.unshareIsRootlessArgsForCall = append(fake.unshareIsRootlessArgsForCall, struct {
	}{})
	fake.recordInvocation("UnshareIsRootless", []interface{}{})
	fake.unshareIsRootlessMutex.Unlock()
	if fake.UnshareIsRootlessStub != nil {
		return fake.UnshareIsRootlessStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unshareIsRootlessReturns
	return fakeReturns.result1
}

func (fake *FakeVerifierImpl) UnshareIsRootlessCallCount() int {
	fake.unshareIsRootlessMutex.RLock()
	defer fake.unshareIsRootlessMutex.RUnlock()
	return len(fake.unshareIsRootlessArgsForCall)
}

func (fake *FakeVerifierImpl) UnshareIsRootlessCalls(stub func() bool) {
	fake.unshareIsRootlessMutex.Lock()
	defer fake.unshareIsRootlessMutex.Unlock()
	fake.UnshareIsRootlessStub = stub
}

func (fake *FakeVerifierImpl) UnshareIsRootlessReturns(result1 bool) {
	fake.unshareIsRootlessMutex.Lock()
	defer fake.unshareIsRootlessMutex.Unlock()
	fake.UnshareIsRootlessStub = nil
	fake.unshareIsRootlessReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeVerifierImpl) UnshareIsRootlessReturnsOnCall(i int, result1 bool) {
	fake.unshareIsRootlessMutex.Lock()
	defer fake.unshareIsRootlessMutex.Unlock()
	fake.UnshareIsRootlessStub = nil
	if fake.unshareIsRootlessReturnsOnCall == nil {
		fake.unshareIsRootlessReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.unshareIsRootlessReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeVerifierImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.execLookPathMutex.RLock()
	defer fake.execLookPathMutex.RUnlock()
	fake.osStatMutex.RLock()
	defer fake.osStatMutex.RUnlock()
	fake.runcIsEnabledMutex.RLock()
	defer fake.runcIsEnabledMutex.RUnlock()
	fake.unshareIsRootlessMutex.RLock()
	defer fake.unshareIsRootlessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerifierImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
